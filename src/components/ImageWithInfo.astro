---
import { Picture } from 'astro:assets'

export interface Props {
  image: ImageMetadata
  imageAlt: string
  title?: string
  text: string
  ctaLink?: string
  ctaText?: string
  slideColor?: string | null
  class?: string
}

const { image, imageAlt, title, text, ctaLink, ctaText, slideColor, class: className } = Astro.props
---

<article class:list={['image-with-info', className]}>
  <Picture src={image} formats={['avif', 'webp']} alt={imageAlt} />
  <div class="info" style={`background-color: ${slideColor || 'var(--color-green-100)'};`}>
    {title && <h3>{title}</h3>}
    <p>{text}</p>
    {
      ctaText && ctaLink && (
        <a class="site-link bold" href={ctaLink}>
          {ctaText}
        </a>
      )
    }
  </div>
</article>

<style>
  .image-with-info {
    position: relative;
    height: 100%;
    max-height: 425px;
    overflow: hidden;
  }

  .image-with-info img {
    transition: transform var(--transition-normal);

    @media (min-width: 1240px) {
      & {
        height: 100%;
        object-fit: cover;
      }
    }
  }

  @media (min-width: 768px) {
    .image-with-info:hover img {
      transform: scale(1.05);
    }
  }

  .image-with-info.active img {
    transform: scale(1.05);
  }

  .image-with-info .info {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: fit-content;
    transform: translateY(100%);
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
    padding: 2rem;
    opacity: 0;
    border-radius: var(--border-radius-card) var(--border-radius-card) 0 0;
    transition:
      opacity var(--transition-normal),
      transform var(--transition-normal);
  }

  @media (min-width: 768px) {
    .image-with-info:hover .info {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .image-with-info.active .info {
    opacity: 1;
    transform: translateY(0);
  }

  .info p {
    font-size: var(--size-xs);
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const images = document.querySelectorAll('.image-with-info')

    function handleActiveImagesOnScroll() {
      if (!window.IntersectionObserver) {
        return console.log('IntersectionObserver not supported')
      }

      const options = {
        root: null,
        rootMargin: '-25%',
        threshold: 0.1,
      }

      const observer = new IntersectionObserver((entries) => {
        if (window.innerWidth < 768) {
          entries.forEach((entry) => {
            const image = entry.target

            if (entry.isIntersecting) {
              image.classList.add('active')
            } else {
              image.classList.remove('active')
            }
          })
        }
      }, options)

      images.forEach((image) => observer.observe(image))
    }

    // Reset active sections on resize
    window.addEventListener('resize', () => {
      images.forEach((image) => image.classList.remove('active'))
    })

    // Set active sections on scroll
    document.addEventListener('scroll', handleActiveImagesOnScroll)
  })
</script>
