---
import { Picture } from 'astro:assets'

export interface Props {
  image: ImageMetadata
  imageAlt: string
  title?: string
  text: string
  ctaLink?: string
  ctaText?: string
  slideColor?: string | null
  class?: string
}

const { image, imageAlt, title, text, ctaLink, ctaText, slideColor, class: className } = Astro.props
---

<div class:list={['image', className]}>
  <Picture src={image} formats={['avif', 'webp']} alt={imageAlt} />
  <div class="image-info" style={`background-color: ${slideColor || 'var(--color-green-100)'};`}>
    {title && <h3>{title}</h3>}
    <p>{text}</p>
    {
      ctaText && ctaLink && (
        <a class="site-link bold" href={ctaLink}>
          {ctaText}
        </a>
      )
    }
  </div>
</div>

<style>
  .image {
    position: relative;
    height: 425px;
    overflow: hidden;
  }

  .image img {
    transition: transform var(--transition-normal);
  }

  @media (min-width: 768px) {
    .image:hover img {
      transform: scale(1.05);
      /* 
        filter: blur(2px);
        Not a smooth transition, transition is temporarily removed
        This causes a flash of whitespace inbetween images 
      */
    }
  }

  .image.active img {
    transform: scale(1.05);
  }

  .image .image-info {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: fit-content;
    transform: translateY(100%);
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
    padding: 2rem;
    opacity: 0;
    border-radius: var(--border-radius-card) var(--border-radius-card) 0 0;
    transition:
      opacity var(--transition-normal),
      transform var(--transition-normal);
  }

  @media (min-width: 768px) {
    .image:hover .image-info {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .image.active .image-info {
    opacity: 1;
    transform: translateY(0);
  }

  .image-info p {
    font-size: var(--size-xs);
  }
</style>

<script>
  const images = document.querySelectorAll('.image')

  function handleActiveImagesOnScroll() {
    if (!window.IntersectionObserver) {
      return console.log('IntersectionObserver not supported')
    }

    const options = {
      root: null,
      rootMargin: '-25%',
      threshold: 0.1,
    }

    const observer = new IntersectionObserver((entries) => {
      if (window.innerWidth < 768) {
        entries.forEach((entry) => {
          const image = entry.target

          if (entry.isIntersecting) {
            image.classList.add('active')
          } else {
            image.classList.remove('active')
          }
        })
      }
    }, options)

    images.forEach((image) => observer.observe(image))
  }

  // Reset active sections on resize
  window.addEventListener('resize', () => {
    images.forEach((image) => image.classList.remove('active'))
  })

  // Set active sections on scroll
  document.addEventListener('scroll', handleActiveImagesOnScroll)
</script>
